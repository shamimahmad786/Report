export class ExcelGeneration {

    gridApi: any;
    uniHeader: any;
    uniYear: any;
    uniState: any;
    uniDist: any;
    uniBlock: any;
    thableNote: any;
    reportDate: any;
    reportDescription: any;
    reportDescriptionName: any;
    columnLengthForExcel: any;
    reportOrder: any;

    excelGen(gApi, uh, uy, us, ud, ub, tan, rd, clfe, ro) {

        this.gridApi = gApi;
        this.uniHeader = uh;
        this.uniYear = uy;
        this.uniState = us;
        this.uniDist = ud;
        this.uniBlock = ub;
        this.thableNote = tan;
        this.reportDate = rd;
        this.columnLengthForExcel = clfe;
        this.reportOrder = ro;
    
        const uniState = this.uniState;
        const uniDist = this.uniDist;
        const uniBlock = this.uniBlock;
        // alert(this.reportOrder)
        // debugger
    
        if (uniState === "National") {
          this.reportDescription = "Report type: National";
          this.reportDescriptionName = "Report type - National";
        } else if (uniState === "State Name :all") {
          this.reportDescription = "Report type: State-wise";
          this.reportDescriptionName = "Report type - State-wise";
        } else if (uniDist === "all") {
          this.reportDescription = uniState + "   District: All District";
          this.reportDescriptionName = uniState + "   District - All District";
        } else if (uniState != "national" && uniState != "State Name :all" && uniDist == "none") {
          this.reportDescription = uniState;
          this.reportDescriptionName = uniState;
        } else if (uniBlock === "all") {
          this.reportDescription = uniState + "   District : " + uniDist + "    Block : All Block";
          this.reportDescriptionName = uniState + "   District : " + uniDist + "    Block - All Block";
        } else if (uniState != "national" && uniState != "State Name :all" && uniDist != "none" && uniDist != "all" && uniBlock === "none") {
          this.reportDescription = uniState + "   District : " + uniDist;
          this.reportDescriptionName = uniState + "   District - " + uniDist;
        } else {
          if (this.reportOrder == "1016"){
            this.reportDescription = uniState + "_District : " + uniDist + "_Block : " + uniBlock;
            this.reportDescriptionName ="_Block-" + uniBlock;
          }else{
            this.reportDescription = uniState + "_District : " + uniDist + "_Block : " + uniBlock;
            this.reportDescriptionName ="_District-" + uniDist + "_Block-" + uniBlock;
          }
        }

        // Formatting Year Value to Year Start
        if(this.uniYear == '13' || this.uniYear == 13){
          var uniYearFormatted = '2012-13';
        }else if(this.uniYear == '14' || this.uniYear == 14){
          var uniYearFormatted = '2013-14';
        }else if(this.uniYear == '15' || this.uniYear == 15){
          var uniYearFormatted = '2014-15';
        }else if(this.uniYear == '16' || this.uniYear == 16){
          var uniYearFormatted = '2015-16';
        }else if(this.uniYear == '17' || this.uniYear == 17){
          var uniYearFormatted = '2016-17';
        }else if(this.uniYear == '18' || this.uniYear == 18){
          var uniYearFormatted = '2017-18';
        }else if(this.uniYear == '19' || this.uniYear == 19){
          var uniYearFormatted = '2018-19';
        }else if(this.uniYear == '20' || this.uniYear == 20){
          var uniYearFormatted = '2019-20';
        }else if(this.uniYear == '21' || this.uniYear == 21){
          var uniYearFormatted = '2020-21';
        }

        var excelfilename=this.uniHeader + "_" + this.reportDescriptionName + "_" + this.uniYear;

        // var excelfilenameNew = excelfilename.replace(/[^a-zA-Z ]/g, "");
    
        var params = {
          columnGroups: true,
          fileName: excelfilename + ".xlsx",
          customHeader: [
            [
              {
                styleId: 'ReportName',
                data: {
                  type: 'String',
                  value: this.uniHeader + "                             Report Id : " + this.reportOrder,
                },
                mergeAcross: this.columnLengthForExcel - 1,
              }
            ],
            [
              {
                styleId: 'ReportGenerateBy',
                data: {
                  type: 'String',
                  value: 'Report Generated By NIC',
                },
                mergeAcross: (this.columnLengthForExcel / 2) - 1,
              },
              {
                styleId: 'ReportDate',
                data: {
                  type: 'String',
                  value: 'Report Export Date :' + this.reportDate,
                },
                mergeAcross: (this.columnLengthForExcel / 2) - 1,
              }
            ],
            [
              {
                styleId: 'academicYear',
                data: {
                  type: 'String',
                  value: 'Academic Year:' + uniYearFormatted,
                },
                mergeAcross: (this.columnLengthForExcel / 4) - 1,
              },
              {
                styleId: 'ReportState',
                data: {
                  type: 'String',
                  value: this.uniState,
                },
                mergeAcross: (this.columnLengthForExcel / 4) - 1,
              },
              {
                styleId: 'ReportDistrict',
                data: {
                  type: 'String',
                  value: 'District Name :' + this.uniDist,
                },
                mergeAcross: (this.columnLengthForExcel / 4) - 1,
              },
              {
                styleId: 'ReportBlock',
                data: {
                  type: 'String',
                  value: 'Block Name :' + this.uniBlock,
                },
                mergeAcross: (this.columnLengthForExcel / 4) - 1,
              }
            ],
          ],
          customFooter: [
            [{
              styleId: 'note',
              data: {
                type: 'String',
                value: this.thableNote,
              },
              mergeAcross: this.columnLengthForExcel - 1,
            }],
          ],
        };
        this.gridApi.exportDataAsExcel(params);
      }
}